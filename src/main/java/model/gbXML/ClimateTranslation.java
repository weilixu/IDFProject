package main.java.model.gbXML;

import org.jdom2.Namespace;

import main.java.model.idd.EnergyPlusObjectTemplate;
import main.java.model.idd.IDDParser;
import main.java.model.idf.IDFFileObject;
import main.java.model.idf.IDFObject;

/**
 * This class is used for acquiring the information from site / location or user
 * inputs Define sizing period design day (from ddy) Define runperiod (assume 1
 * year) Define special days (if any or in U.S.) Define daylight saving time (if
 * any or in U.S.) Define ground temperature (from weather file) Define water
 * main temperature
 * 
 * @author weilixu
 *
 */
public class ClimateTranslation {
	@SuppressWarnings("unused")
	private Namespace ns;
	private IDDParser iddParser;
	// for demo purpose, this will default everything to Pittsburgh
	public ClimateTranslation(Namespace ns, IDDParser iddParser) {
		this.ns = ns;
		this.iddParser = iddParser;
	}

	public void setUpDesignDayConditionForBaseline(IDFFileObject file) {
		// set to chicago
		// heating
		EnergyPlusObjectTemplate designDay = iddParser.getObject("SizingPeriod:DesignDay");

		// add 1 more for the object label
		IDFObject winterDesignDay = new IDFObject("SizingPeriod:DesignDay", designDay.getNumberOfFields() + 1);
		winterDesignDay.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		for (int i = 0; i < designDay.getNumberOfFields(); i++) {
			String fieldName = designDay.getFieldTemplateByIndex(i).getFieldName();
			winterDesignDay.setIndexedStandardComment(i, fieldName);

			if (fieldName.equals("Name")) {
				winterDesignDay.setIndexedData(i, "Winter DesignDay Condition");
			} else if (fieldName.equals("Month")) {
				winterDesignDay.setIndexedData(i, "1");
			} else if (fieldName.equals("Day of Month")) {
				winterDesignDay.setIndexedData(i, "21");
			} else if (fieldName.equals("Day Type")) {
				winterDesignDay.setIndexedData(i, "WinterDesignDay");
			} else if (fieldName.equals("Maximum Dry-Bulb Temperature")) {
				winterDesignDay.setIndexedData(i, "-20.6", "C");
			} else if (fieldName.equals("Daily Dry-Bulb Temperature Range")) {
				winterDesignDay.setIndexedData(i, "0", "deltaC");
			} else if (fieldName.equals("Humidity Condition Type")) {
				winterDesignDay.setIndexedData(i, "Wetbulb");
			} else if (fieldName.equals("Wetbulb or DewPoint at Maximum Dry-Bulb")) {
				winterDesignDay.setIndexedData(i, "-20.6", "C");
			} else if (fieldName.equals("Barometric Pressure")) {
				winterDesignDay.setIndexedData(i, "99063", "Pa");
			} else if (fieldName.equals("Wind Speed")) {
				winterDesignDay.setIndexedData(i, "4.9", "m/s");
			} else if (fieldName.equals("Wind Direction")) {
				winterDesignDay.setIndexedData(i, "270", "deg");
			} else {
				if (designDay.getFieldTemplateByIndex(i).getUnit() != null) {
					String unit = designDay.getFieldTemplateByIndex(i).getUnit();
					if (designDay.getFieldTemplateByIndex(i).isRequired()
							&& designDay.getFieldTemplateByIndex(i).getDefault() != null) {
						winterDesignDay.setIndexedData(i, designDay.getFieldTemplateByIndex(i).getDefault(), unit);
					} else {
						winterDesignDay.setIndexedData(i, "", unit);
					}
				} else {
					if (designDay.getFieldTemplateByIndex(i).isRequired()
							&& designDay.getFieldTemplateByIndex(i).getDefault() != null) {
						winterDesignDay.setIndexedData(i, designDay.getFieldTemplateByIndex(i).getDefault());
					} else {
						winterDesignDay.setIndexedData(i, "");
					}
				}
			}
		}
		file.addObject(winterDesignDay);
		
		IDFObject summerDesignDay = new IDFObject("SizingPeriod:DesignDay", designDay.getNumberOfFields() + 1);
		summerDesignDay.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		for (int i = 0; i < designDay.getNumberOfFields(); i++) {
			String fieldName = designDay.getFieldTemplateByIndex(i).getFieldName();
			summerDesignDay.setIndexedStandardComment(i, fieldName);

			if (fieldName.equals("Name")) {
				summerDesignDay.setIndexedData(i, "Summer DesignDay Condition");
			} else if (fieldName.equals("Month")) {
				summerDesignDay.setIndexedData(i, "7");
			} else if (fieldName.equals("Day of Month")) {
				summerDesignDay.setIndexedData(i, "21");
			} else if (fieldName.equals("Day Type")) {
				summerDesignDay.setIndexedData(i, "SummerDesignDay");
			} else if (fieldName.equals("Maximum Dry-Bulb Temperature")) {
				summerDesignDay.setIndexedData(i, "31.2", "C");
			} else if (fieldName.equals("Daily Dry-Bulb Temperature Range")) {
				summerDesignDay.setIndexedData(i, "10.7", "deltaC");
			} else if (fieldName.equals("Humidity Condition Type")) {
				summerDesignDay.setIndexedData(i, "Wetbulb");
			} else if (fieldName.equals("Wetbulb or DewPoint at Maximum Dry-Bulb")) {
				summerDesignDay.setIndexedData(i, "25.5", "C");
			} else if (fieldName.equals("Barometric Pressure")) {
				summerDesignDay.setIndexedData(i, "99063", "Pa");
			} else if (fieldName.equals("Wind Speed")) {
				summerDesignDay.setIndexedData(i, "5.3", "m/s");
			} else if (fieldName.equals("Wind Direction")) {
				summerDesignDay.setIndexedData(i, "230", "deg");
			} else if (fieldName.equals("Sky Clearness")) {
				summerDesignDay.setIndexedData(i, "1");
			} else {
				if (designDay.getFieldTemplateByIndex(i).getUnit() != null) {
					String unit = designDay.getFieldTemplateByIndex(i).getUnit();
					if (designDay.getFieldTemplateByIndex(i).isRequired()
							&& designDay.getFieldTemplateByIndex(i).getDefault() != null) {
						summerDesignDay.setIndexedData(i, designDay.getFieldTemplateByIndex(i).getDefault(), unit);
					} else {
						summerDesignDay.setIndexedData(i, "", unit);
					}
				} else {
					if (designDay.getFieldTemplateByIndex(i).isRequired()
							&& designDay.getFieldTemplateByIndex(i).getDefault() != null) {
						summerDesignDay.setIndexedData(i, designDay.getFieldTemplateByIndex(i).getDefault());
					} else {
						summerDesignDay.setIndexedData(i, "");
					}
				}
			}
		}
		file.addObject(summerDesignDay);
	}

	public void setUpEnvironmentForBaseline(IDFFileObject file) {
		// Set up runperiod
		EnergyPlusObjectTemplate runPeriod = iddParser.getObject("RunPeriod");
		//run period has minimum fields
		IDFObject runPeriodObj = new IDFObject("RunPeriod", runPeriod.getNumberOfMinFields() + 1);
		runPeriodObj.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		for(int i=0; i<runPeriod.getNumberOfMinFields(); i++) {
			String fieldName = runPeriod.getFieldTemplateByIndex(i).getFieldName();
			runPeriodObj.setIndexedStandardComment(i, fieldName);

			if(fieldName.equals("Name")) {
				runPeriodObj.setIndexedData(i, "");
			}else if(fieldName.equals("Begin Month")) {
				runPeriodObj.setIndexedData(i, "1");
			}else if(fieldName.equals("Begin Day of Month")) {
				runPeriodObj.setIndexedData(i, "1");
			}else if(fieldName.equals("End Month")) {
				runPeriodObj.setIndexedData(i, "12");
			}else if(fieldName.equals("End Day of Month")) {
				runPeriodObj.setIndexedData(i, "31");
			}else {
				if(runPeriod.getFieldTemplateByIndex(i).getDefault()!= null) {
					runPeriodObj.setIndexedData(i, runPeriod.getFieldTemplateByIndex(i).getDefault());
				}else {
					runPeriodObj.setIndexedData(i, "");
				}
			}
		}
		file.addObject(runPeriodObj);

		// Ground temperature
		EnergyPlusObjectTemplate groundTemp = iddParser.getObject("Site:GroundTemperature:BuildingSurface");
		//run period has minimum fields
		IDFObject siteGroundTemp = new IDFObject("Site:GroundTemperature:BuildingSurface", groundTemp.getNumberOfMinFields() + 1);
		siteGroundTemp.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		String[] tempList = new String[] {"19.527", "19.502","19.536","19.598",
				"20.002","21.64","22.225","22.375","21.449","20.121","19.802","19.633"};
		
		for(int i=0; i<groundTemp.getNumberOfMinFields(); i++) {
			String fieldName = groundTemp.getFieldTemplateByIndex(i).getFieldName();
			siteGroundTemp.setIndexedStandardComment(i, fieldName);
			siteGroundTemp.setIndexedData(i, tempList[i],"C");
		}
		file.addObject(runPeriodObj);

	}

}
