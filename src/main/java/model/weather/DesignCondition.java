package main.java.model.weather;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import main.java.config.ServerConfig;
import main.java.model.idf.IDFObject;
import main.java.util.NumUtil;

public class DesignCondition {
    private final Logger LOG = LoggerFactory.getLogger(this.getClass());
	
	private static final String designConditionDatabase = "ashrae_2013.csv";
	
	private Map<String, ArrayList<String>> designConditionMap;
	
	public DesignCondition() {
		File designConditionFile = new File(ServerConfig.readProperty("ResourcePath") + "/designdaycondition/" + designConditionDatabase);
		designConditionMap = new HashMap<>();
		
		String line;
        try (FileReader fileReader = new FileReader(designConditionFile);
                BufferedReader bufferedReader = new BufferedReader(fileReader)){
        		line = bufferedReader.readLine();
        		//this is header
        		String[] header = line.split(",");
        		for(String s: header) {
        			designConditionMap.put(s, new ArrayList<>());
        		}
        		int len = header.length;
        		while((line = bufferedReader.readLine()) != null) {
        			String[] data = line.split(",");
        			for(int i=0; i<len; i++) {
        				designConditionMap.get(header[i]).add(data[i]);
        			}
        		}
        		
        }catch(FileNotFoundException ex) {
            LOG.error("Unable to open file '" + ": design condition database "+ ex.getMessage(), ex);
        } catch(IOException ex) {
            LOG.error("Error reading file '" + ": design condition database "+ ex.getMessage(), ex);
        }
	}
	
	/**
	 * Get the cooling design day (1%) condition based on WMO station id
	 * @param wmoId
	 */
	public IDFObject getCoolingDesignDayWMO(String wmoId) {
		ArrayList<String> wmoIdList = designConditionMap.get("WMO.");
		int index = 0;
		for(int i=0; i<wmoIdList.size(); i++) {
			if(wmoIdList.get(i).equals(wmoId)) {
				index = i;
			}
		}
		return generateCoolingDesignDay(index);
	}
	
	public IDFObject getHeatingDesignDayWMO(String wmoId) {
		ArrayList<String> wmoIdList = designConditionMap.get("WMO.");
		int index = 0;
		for(int i=0; i<wmoIdList.size(); i++) {
			if(wmoIdList.get(i).equals(wmoId)) {
				index = i;
			}
		}
		return generateHeatingDesignDay(index);
	}
	
	public IDFObject getSiteObject(String wmoId) {
		ArrayList<String> wmoIdList = designConditionMap.get("WMO.");
		int index = 0;
		for(int i=0; i<wmoIdList.size(); i++) {
			if(wmoIdList.get(i).equals(wmoId)) {
				index = i;
			}
		}
		return generateSiteLocation(index);
	}
	
	public String getClosestWeatherStation(double lat, double lon) {
		double srefDistance = NumUtil.MAX_VALUE;
		String wmoId = "";

		ArrayList<String> latList = designConditionMap.get("Lat");
		ArrayList<String> lonList = designConditionMap.get("Long");
		ArrayList<String> wmoList = designConditionMap.get("WMO.");
		for(int i=0; i<latList.size(); i++) {
			//default to Pittsburgh
			double lat2 = NumUtil.readDouble(latList.get(i), 40.4406);
			double lon2 = NumUtil.readDouble(lonList.get(i), -79.9959);
			
			double distance = calculateDistance(lat2, lon2, lat, lon);
			
			if(distance < srefDistance) {
				srefDistance = distance;
				wmoId = wmoList.get(i);
			}
		}
		return wmoId;
	}
	
	
	private IDFObject generateHeatingDesignDay(int index) {
		String coldestMonth = designConditionMap.get("ColdestMonth").get(index);
		String dryBulbTemp = designConditionMap.get("DB990").get(index);
		String windSpeed = designConditionMap.get("WS_DB996").get(index);
		String windDegree = designConditionMap.get("WD_DB996").get(index);
		Double stdPVal = NumUtil.readDouble(designConditionMap.get("StdP").get(index), 0) * 1000;
		String stdP = stdPVal.toString();
		String station = designConditionMap.get("Station").get(index);
		
		IDFObject idfObject = new IDFObject("SizingPeriod:DesignDay", 27);
		idfObject.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		
		idfObject.setIndexedStandardComment(0, "Name");
		idfObject.setIndexedData(0, station + " 99%");
		
		idfObject.setIndexedStandardComment(1, "Month");
		idfObject.setIndexedData(1, coldestMonth);
		
		idfObject.setIndexedStandardComment(2, "Day of Month");
		idfObject.setIndexedData(2, "21");
		
		idfObject.setIndexedStandardComment(3, "Day Type");
		idfObject.setIndexedData(3, "WinterDesignDay");
		
		idfObject.setIndexedStandardComment(4, "Maximum Dry-Bulb Temperature");
		idfObject.setIndexedData(4, dryBulbTemp, "C");
		
		idfObject.setIndexedStandardComment(5, "Daily Dry-Bulb Temperature Range");
		idfObject.setIndexedData(5, "0.0", "deltaC");
		
		idfObject.setIndexedStandardComment(6, "Dry-Bulb Temperature Range Modifier Type");
		idfObject.setIndexedData(6, "DefaultMultipliers");

		idfObject.setIndexedStandardComment(7, "Dry-Bulb Temperature Range Modifier Schedule Name");
		idfObject.setIndexedData(7, "");
		
		idfObject.setIndexedStandardComment(8, "Humidity Condition Type");
		idfObject.setIndexedData(8, "Wetbulb");

		idfObject.setIndexedStandardComment(9, "Wetbulb at Maximum Dry-Bulb");
		idfObject.setIndexedData(9, dryBulbTemp, "C");
		
		idfObject.setIndexedStandardComment(10, "Humidity Indicating Day Schedule Name");
		idfObject.setIndexedData(10, "", "C");

		idfObject.setIndexedStandardComment(11, "Humidity Ratio at Maximum Dry-Bulb");
		idfObject.setIndexedData(11, "", "kgWater/kgDryAir");

		idfObject.setIndexedStandardComment(12, "Enthalpy at Maximum Dry-Bulb");
		idfObject.setIndexedData(12, "", "J/kg");
		
		idfObject.setIndexedStandardComment(13, "Daily Wet-Bulb Temperature Range");
		idfObject.setIndexedData(13, "", "deltaC");
		
		idfObject.setIndexedStandardComment(14, "Barometric Pressure");
		idfObject.setIndexedData(14, stdP, "pa");
		
		idfObject.setIndexedStandardComment(15, "Wind Speed");
		idfObject.setIndexedData(15, windSpeed, "m/s");

		idfObject.setIndexedStandardComment(16, "Wind Direction {Degrees; N=0, S=180}");
		idfObject.setIndexedData(16, windDegree, "Degrees");
		
		idfObject.setIndexedStandardComment(17, "Rain");
		idfObject.setIndexedData(17, "No");
		
		idfObject.setIndexedStandardComment(18, "Snow on ground");
		idfObject.setIndexedData(18, "No");
		
		idfObject.setIndexedStandardComment(19, "Daylight Savings Time Indicator");
		idfObject.setIndexedData(19, "No");
		
		idfObject.setIndexedStandardComment(20, "Solar Model Indicator");
		idfObject.setIndexedData(20, "ASHRAEClearSky");
		
		idfObject.setIndexedStandardComment(21, "Beam Solar Day Schedule Name");
		idfObject.setIndexedData(21, "");
		
		idfObject.setIndexedStandardComment(22, "Diffuse Solar Day Schedule Name");
		idfObject.setIndexedData(22, "");
		
		idfObject.setIndexedStandardComment(23, "ASHRAE Clear Sky Optical Depth for Beam Irradiance (taub)");
		idfObject.setIndexedData(23, "");
		
		idfObject.setIndexedStandardComment(24, "ASHRAE Clear Sky Optical Depth for Diffuse Irradiance");
		idfObject.setIndexedData(24, "");
		
		idfObject.setIndexedStandardComment(25, "Clearness");
		idfObject.setIndexedData(25, "0.00","0.0 to 1.1");

		return idfObject;
	}
	
	private IDFObject generateCoolingDesignDay(int index) {
		String hotestMonth = designConditionMap.get("HottestMonth").get(index);
		String dryBulbTemp = designConditionMap.get("DB010").get(index);
		String dryBulbRange = designConditionMap.get("DBR").get(index);
		String WBDB = designConditionMap.get("WB_DB010").get(index);
		String windSpeed = designConditionMap.get("WS_DB004").get(index);
		String windDegree = designConditionMap.get("WD_DB004").get(index);
		String taub = designConditionMap.get("taub").get(index);
		String taud = designConditionMap.get("taud").get(index);
		Double stdPVal = NumUtil.readDouble(designConditionMap.get("StdP").get(index), 0) * 1000;
		String stdP = stdPVal.toString();
		String station = designConditionMap.get("Station").get(index);
		
		IDFObject idfObject = new IDFObject("SizingPeriod:DesignDay", 27);
		idfObject.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		
		idfObject.setIndexedStandardComment(0, "Name");
		idfObject.setIndexedData(0, station + " 1%");
		
		idfObject.setIndexedStandardComment(1, "Month");
		idfObject.setIndexedData(1, hotestMonth);
		
		idfObject.setIndexedStandardComment(2, "Day of Month");
		idfObject.setIndexedData(2, "21");
		
		idfObject.setIndexedStandardComment(3, "Day Type");
		idfObject.setIndexedData(3, "SummerDesignDay");
		
		idfObject.setIndexedStandardComment(4, "Maximum Dry-Bulb Temperature");
		idfObject.setIndexedData(4, dryBulbTemp, "C");
		
		idfObject.setIndexedStandardComment(5, "Daily Dry-Bulb Temperature Range");
		idfObject.setIndexedData(5, dryBulbRange, "deltaC");
		
		idfObject.setIndexedStandardComment(6, "Dry-Bulb Temperature Range Modifier Type");
		idfObject.setIndexedData(6, "DefaultMultipliers");

		idfObject.setIndexedStandardComment(7, "Dry-Bulb Temperature Range Modifier Schedule Name");
		idfObject.setIndexedData(7, "");
		
		idfObject.setIndexedStandardComment(8, "Humidity Condition Type");
		idfObject.setIndexedData(8, "Wetbulb");

		idfObject.setIndexedStandardComment(9, "Wetbulb at Maximum Dry-Bulb");
		idfObject.setIndexedData(9, WBDB, "C");
		
		idfObject.setIndexedStandardComment(10, "Humidity Indicating Day Schedule Name");
		idfObject.setIndexedData(10, "", "C");

		idfObject.setIndexedStandardComment(11, "Humidity Ratio at Maximum Dry-Bulb");
		idfObject.setIndexedData(11, "", "kgWater/kgDryAir");

		idfObject.setIndexedStandardComment(12, "Enthalpy at Maximum Dry-Bulb");
		idfObject.setIndexedData(12, "", "J/kg");
		
		idfObject.setIndexedStandardComment(13, "Daily Wet-Bulb Temperature Range");
		idfObject.setIndexedData(13, "", "deltaC");
		
		idfObject.setIndexedStandardComment(14, "Barometric Pressure");
		idfObject.setIndexedData(14, stdP, "pa");
		
		idfObject.setIndexedStandardComment(15, "Wind Speed");
		idfObject.setIndexedData(15, windSpeed, "m/s");

		idfObject.setIndexedStandardComment(16, "Wind Direction {Degrees; N=0, S=180}");
		idfObject.setIndexedData(16, windDegree, "Degrees");
		
		idfObject.setIndexedStandardComment(17, "Rain");
		idfObject.setIndexedData(17, "No");
		
		idfObject.setIndexedStandardComment(18, "Snow on ground");
		idfObject.setIndexedData(18, "No");
		
		idfObject.setIndexedStandardComment(19, "Daylight Savings Time Indicator");
		idfObject.setIndexedData(19, "No");
		
		idfObject.setIndexedStandardComment(20, "Solar Model Indicator");
		idfObject.setIndexedData(20, "ASHRAETau");
		
		idfObject.setIndexedStandardComment(21, "Beam Solar Day Schedule Name");
		idfObject.setIndexedData(21, "");
		
		idfObject.setIndexedStandardComment(22, "Diffuse Solar Day Schedule Name");
		idfObject.setIndexedData(22, "");
		
		idfObject.setIndexedStandardComment(23, "ASHRAE Clear Sky Optical Depth for Beam Irradiance (taub)");
		idfObject.setIndexedData(23, taub);
		
		idfObject.setIndexedStandardComment(24, "ASHRAE Clear Sky Optical Depth for Diffuse Irradiance");
		idfObject.setIndexedData(24, taud);
		
		idfObject.setIndexedStandardComment(25, "Clearness");
		idfObject.setIndexedData(25, "0.00","0.0 to 1.1");
		
		return idfObject;
	}
	
	private IDFObject generateSiteLocation(int index) {
		String latitude = designConditionMap.get("Lat").get(index);
		String longitude = designConditionMap.get("Long").get(index);
		String elevation = designConditionMap.get("Elev").get(index);
		String timezone = designConditionMap.get("TZ").get(index);
		String station = designConditionMap.get("Station").get(index);
		
		IDFObject idfObject = new IDFObject("Site:Location", 6);
		idfObject.setTopComments(new String[] { "!- Generated by BuildSimHub" });
		
		
		idfObject.setIndexedStandardComment(0, "Name");
		idfObject.setIndexedData(0, station);
		
		idfObject.setIndexedStandardComment(1, "Latitude");
		idfObject.setIndexedData(1, latitude,"deg");

		idfObject.setIndexedStandardComment(2, "Longitude");
		idfObject.setIndexedData(2, longitude,"deg");
		
		idfObject.setIndexedStandardComment(3, "Time Zone");
		idfObject.setIndexedData(3, timezone,"hr");
		
		idfObject.setIndexedStandardComment(4, "Elevation");
		idfObject.setIndexedData(4, elevation,"m");

		return idfObject;
	}
	
	private static double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
		double earthRadius = 6371000.0; //meters
		
		double latDistance = Math.toRadians(lat2-lat1);
		double lonDistance = Math.toRadians(lon2 - lon1);
		
		double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2) +
				Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
						* Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		double distance = earthRadius * c;
		return distance;
	}
	
	public static void main(String[] args) {
        ServerConfig.setConfigPath("/Users/weilixu/Documents/GitHub/BuildSimHub/WebContent/WEB-INF/server.config");
        DesignCondition cond = new DesignCondition();
        //cond.getClosestWeatherStation(lat, lon)
        
        IDFObject siteLoc = cond.getCoolingDesignDayWMO("724050");
        System.out.println(siteLoc.printStatement(10));
        siteLoc = cond.getHeatingDesignDayWMO("724050");
        System.out.println(siteLoc.printStatement(10));
	}

}
